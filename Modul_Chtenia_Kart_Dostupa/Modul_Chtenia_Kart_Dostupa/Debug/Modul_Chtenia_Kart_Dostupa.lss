
Modul_Chtenia_Kart_Dostupa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000005d6  0000066a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800102  00800102  0000066c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000138d  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7f  00000000  00000000  00001c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e20  00000000  00000000  000027e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  00003608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000777  00000000  00000000  00003a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000589  00000000  00000000  00004193  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000471c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_1>
   8:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 30 02 	jmp	0x460	; 0x460 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  9e:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <get_w26_LOW_phase>:
    return EEPROM_read_byte(w26_LOW_phase_eep_addr);
}

void set_w26_LOW_phase(uint8_t data)
{
    EEPROM_write_byte(w26_LOW_phase_eep_addr, data);
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 5d 00 	call	0xba	; 0xba <EEPROM_read_byte>
  ae:	08 95       	ret

000000b0 <get_w26_HIGH_phase>:
}


uint8_t get_w26_HIGH_phase()
{
    return EEPROM_read_byte(w26_HIGH_phase_eep_addr);
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 5d 00 	call	0xba	; 0xba <EEPROM_read_byte>
}
  b8:	08 95       	ret

000000ba <EEPROM_read_byte>:
    sei();
    }

    uint8_t EEPROM_read_byte(uint16_t uiAddress)
    {
    cli();																					 /// Wait for completion of previous write */
  ba:	f8 94       	cli
    while(EECR & (1<<EEPE))
  bc:	f9 99       	sbic	0x1f, 1	; 31
  be:	fe cf       	rjmp	.-4      	; 0xbc <EEPROM_read_byte+0x2>
    ;
                                                                                             /// Set up address register */
    EEAR = uiAddress;
  c0:	92 bd       	out	0x22, r25	; 34
  c2:	81 bd       	out	0x21, r24	; 33
                                                                                             /// Start eeprom read by writing EERE */
    EECR |= (1<<EERE);
  c4:	8f b3       	in	r24, 0x1f	; 31
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	8f bb       	out	0x1f, r24	; 31
    sei();																					 /// Return data from data register */
  ca:	78 94       	sei
    return EEDR;
  cc:	80 b5       	in	r24, 0x20	; 32
  ce:	08 95       	ret

000000d0 <LEDs_ini>:
*/


void LEDs_ini()
{	
	DEBUG_LED_DDR_REGISTER |= 1 << DEBUG_LED_PIN;										                       /// DEBUG_LED pin to output	   
  d0:	87 b1       	in	r24, 0x07	; 7
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	87 b9       	out	0x07, r24	; 7
  d6:	08 95       	ret

000000d8 <Blink_DEBUG_LED>:
}


void Blink_DEBUG_LED()
{														   	
	DEBUG_LED_ON;
  d8:	88 b1       	in	r24, 0x08	; 8
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	88 b9       	out	0x08, r24	; 8
	//_delay_ms(DEBUG_LED_BLINK_TIME);
	DEBUG_LED_OFF;
  de:	88 b1       	in	r24, 0x08	; 8
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	88 b9       	out	0x08, r24	; 8
  e4:	08 95       	ret

000000e6 <main>:

*/

int main(void)
{             
	LEDs_ini();
  e6:	0e 94 68 00 	call	0xd0	; 0xd0 <LEDs_ini>
    Blink_DEBUG_LED();    
  ea:	0e 94 6c 00 	call	0xd8	; 0xd8 <Blink_DEBUG_LED>
 	USART_Ini( MYUBRR );                  
  ee:	87 e6       	ldi	r24, 0x67	; 103
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 9d 00 	call	0x13a	; 0x13a <USART_Ini>
 	Weigand_26_ini();                                                                  
  f6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Weigand_26_ini>
                                 
 	sei();		
  fa:	78 94       	sei
	
	while (1)
	{	
        watchdog_ini();		
  fc:	0e 94 af 00 	call	0x15e	; 0x15e <watchdog_ini>
        
        		
		if (bit_is_set(programm_status_byte, W26_MESSAGE_READY_BIT))
 100:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <programm_status_byte>
 104:	80 ff       	sbrs	r24, 0
 106:	09 c0       	rjmp	.+18     	; 0x11a <main+0x34>
		{
			w26_get_data_from_messege();
 108:	0e 94 cc 00 	call	0x198	; 0x198 <w26_get_data_from_messege>
			send_w26_data_to_uart();
 10c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <send_w26_data_to_uart>
			CLEAR_W26_MESSAGE_READY_BIT;
 110:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <programm_status_byte>
 114:	8e 7f       	andi	r24, 0xFE	; 254
 116:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <programm_status_byte>
 		}	                 
         
        watchdog_disable();        
 11a:	0e 94 bf 00 	call	0x17e	; 0x17e <watchdog_disable>
        sleep();
 11e:	0e 94 92 00 	call	0x124	; 0x124 <sleep>
	}
 122:	ec cf       	rjmp	.-40     	; 0xfc <main+0x16>

00000124 <sleep>:

#include "sleep_mode.h"

void sleep()
{
    set_sleep_mode(SLEEP_MODE_IDLE);
 124:	83 b7       	in	r24, 0x33	; 51
 126:	81 7f       	andi	r24, 0xF1	; 241
 128:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
 12a:	83 b7       	in	r24, 0x33	; 51
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	83 bf       	out	0x33, r24	; 51

    sleep_cpu();
 130:	88 95       	sleep
    sleep_disable();
 132:	83 b7       	in	r24, 0x33	; 51
 134:	8e 7f       	andi	r24, 0xFE	; 254
 136:	83 bf       	out	0x33, r24	; 51
 138:	08 95       	ret

0000013a <USART_Ini>:
 */ 
#include "UART.h"

void USART_Ini(uint16_t ubrr)
{
	UBRR0H = (unsigned char)(ubrr>>8);									       /// Set baud rate
 13a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
	UBRR0L = (unsigned char)ubrr;
 13e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);							                   /// Enable: receiver, transmitter
 142:	88 e1       	ldi	r24, 0x18	; 24
 144:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
	UCSR0C = (3<<UCSZ00);													   /// Set frame format: 8data, 1stop bit
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
 14e:	08 95       	ret

00000150 <USART_Transmit>:
}

void USART_Transmit(uint8_t data)
{	
	while ( !( UCSR0A & (1<<UDRE0)) )											/// Wait for empty transmit buffer
 150:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
 154:	95 ff       	sbrs	r25, 5
 156:	fc cf       	rjmp	.-8      	; 0x150 <USART_Transmit>
	;
	UDR0 = data;																/// Put data into buffer, sends the data
 158:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
 15c:	08 95       	ret

0000015e <watchdog_ini>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 15e:	98 e2       	ldi	r25, 0x28	; 40
 160:	88 e1       	ldi	r24, 0x18	; 24
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	a8 95       	wdr
 168:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
@brief Set timeout and enable watchdog.
*/
void watchdog_ini()
{        
    wdt_enable(WDTO_4S);    
    WDTCSR |= (1 << WDIE);
 172:	e0 e6       	ldi	r30, 0x60	; 96
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	80 83       	st	Z, r24
 17c:	08 95       	ret

0000017e <watchdog_disable>:
}

void watchdog_disable()
{
     wdt_reset();
 17e:	a8 95       	wdr
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	a8 95       	wdr
 186:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
 18a:	88 61       	ori	r24, 0x18	; 24
 18c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
 190:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
 194:	0f be       	out	0x3f, r0	; 63
 196:	08 95       	ret

00000198 <w26_get_data_from_messege>:
@brief Divide w26_recieve_data to bytes. \n
Parity processing (not implement now)
*/
void w26_get_data_from_messege()
{
	w26_recieve_data >>= 1;													   /// Delete last parity check bit
 198:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <w26_recieve_data>
 19c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <w26_recieve_data+0x1>
 1a0:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <w26_recieve_data+0x2>
 1a4:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <w26_recieve_data+0x3>
 1a8:	b6 95       	lsr	r27
 1aa:	a7 95       	ror	r26
 1ac:	97 95       	ror	r25
 1ae:	87 95       	ror	r24
	
	w26_last_byte = w26_recieve_data;
 1b0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <w26_last_byte>
	w26_recieve_data >>= 8;
	w26_middle_byte = w26_recieve_data;
 1b4:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <w26_middle_byte>
	w26_recieve_data >>= 8;
	w26_facility = w26_recieve_data;
 1b8:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <w26_facility>
	
	w26_recieve_data = 0;	
 1bc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <w26_recieve_data>
 1c0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <w26_recieve_data+0x1>
 1c4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <w26_recieve_data+0x2>
 1c8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <w26_recieve_data+0x3>
 1cc:	08 95       	ret

000001ce <send_w26_data_to_uart>:
/**
@brief Send w26_facility, w26_middle_byte and w26_last_byte to UART.
*/
void send_w26_data_to_uart()
{
	USART_Transmit(w26_facility);
 1ce:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <w26_facility>
 1d2:	0e 94 a8 00 	call	0x150	; 0x150 <USART_Transmit>
	USART_Transmit(w26_middle_byte);
 1d6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <w26_middle_byte>
 1da:	0e 94 a8 00 	call	0x150	; 0x150 <USART_Transmit>
	USART_Transmit(w26_last_byte);
 1de:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <w26_last_byte>
 1e2:	0e 94 a8 00 	call	0x150	; 0x150 <USART_Transmit>
 1e6:	08 95       	ret

000001e8 <Weigand_26_D0_D1_int_ini>:
Set Wiegand26 D0 and D1 lines STATUS_PASSIVE, we dont know which bit (0 or 1) will be first. \n
Set w26_LOW_phase and w26_HIGH_phase.
*/
void Weigand_26_D0_D1_int_ini()
{	
	d0_expect_rising_falling = EXPECT_FALLING;
 1e8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <d0_expect_rising_falling>
	d1_expect_rising_falling = EXPECT_FALLING;	
 1ec:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <d1_expect_rising_falling>
	
	w26_data = 0;
 1f0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <w26_data>
 1f4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <w26_data+0x1>
 1f8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <w26_data+0x2>
 1fc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <w26_data+0x3>
	w26_receive_bit_counter = 0;
 200:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <w26_receive_bit_counter>
	
	d1_status = STATUS_PASSIVE;
 204:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <d1_status>
	d0_status = STATUS_PASSIVE;        
 208:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <d0_status>
    
    //EEPROM_write_byte(w26_HIGH_phase_eep_addr, 59);    
    w26_LOW_phase = get_w26_LOW_phase();
 20c:	0e 94 53 00 	call	0xa6	; 0xa6 <get_w26_LOW_phase>
 210:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <w26_LOW_phase>
    w26_HIGH_phase = get_w26_HIGH_phase();
 214:	0e 94 58 00 	call	0xb0	; 0xb0 <get_w26_HIGH_phase>
 218:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
                
    USART_Transmit(w26_LOW_phase);
 21c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <w26_LOW_phase>
 220:	0e 94 a8 00 	call	0x150	; 0x150 <USART_Transmit>
    USART_Transmit(w26_HIGH_phase);
 224:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 228:	0e 94 a8 00 	call	0x150	; 0x150 <USART_Transmit>
	
	D0_D1_INT_FALLING;								 
 22c:	e9 e6       	ldi	r30, 0x69	; 105
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	8a 60       	ori	r24, 0x0A	; 10
 234:	80 83       	st	Z, r24
	D0_D1_INT_FLAG_CLEAR;
 236:	8c b3       	in	r24, 0x1c	; 28
 238:	83 60       	ori	r24, 0x03	; 3
 23a:	8c bb       	out	0x1c, r24	; 28
	D0_D1_INT_ENABLE;
 23c:	8d b3       	in	r24, 0x1d	; 29
 23e:	83 60       	ori	r24, 0x03	; 3
 240:	8d bb       	out	0x1d, r24	; 29
 242:	08 95       	ret

00000244 <Weigand_26_low_phase_ini>:
Enable Timer0 compare interrupt, where we enable \n
D0 or D1 lines to receive next front.
*/
void Weigand_26_low_phase_ini()
{
	DEBUG_LED_ON;
 244:	88 b1       	in	r24, 0x08	; 8
 246:	81 60       	ori	r24, 0x01	; 1
 248:	88 b9       	out	0x08, r24	; 8
	
	D0_INT_DISABLE;
 24a:	8d b3       	in	r24, 0x1d	; 29
 24c:	8e 7f       	andi	r24, 0xFE	; 254
 24e:	8d bb       	out	0x1d, r24	; 29
	D1_INT_DISABLE;
 250:	8d b3       	in	r24, 0x1d	; 29
 252:	8d 7f       	andi	r24, 0xFD	; 253
 254:	8d bb       	out	0x1d, r24	; 29
	D0_D1_INT_FLAG_CLEAR;
 256:	8c b3       	in	r24, 0x1c	; 28
 258:	83 60       	ori	r24, 0x03	; 3
 25a:	8c bb       	out	0x1c, r24	; 28
	
	CLEAR_TO_COUNTER;
 25c:	16 bc       	out	0x26, r1	; 38
	CLEAR_T0_COMP_INT_FLAG;
 25e:	85 b3       	in	r24, 0x15	; 21
 260:	82 60       	ori	r24, 0x02	; 2
 262:	85 bb       	out	0x15, r24	; 21
	WAIT_W26_LOW_PHASE;
 264:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <w26_LOW_phase>
 268:	87 bd       	out	0x27, r24	; 39
	TO_COMP_INT_ENABLE;
 26a:	ee e6       	ldi	r30, 0x6E	; 110
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	82 60       	ori	r24, 0x02	; 2
 272:	80 83       	st	Z, r24
	
	CLEAR_T0_OV_INT_FLAG;
 274:	85 b3       	in	r24, 0x15	; 21
 276:	81 60       	ori	r24, 0x01	; 1
 278:	85 bb       	out	0x15, r24	; 21
	T0_OV_INT_ENABLE;
 27a:	80 81       	ld	r24, Z
 27c:	81 60       	ori	r24, 0x01	; 1
 27e:	80 83       	st	Z, r24
 280:	08 95       	ret

00000282 <Weigand_26_high_phase_ini>:
Enable Timer0 compare interrupt, where we enable \n
D0 or D1 lines to receive next front.
*/
void Weigand_26_high_phase_ini()
{
	DEBUG_LED_ON;
 282:	88 b1       	in	r24, 0x08	; 8
 284:	81 60       	ori	r24, 0x01	; 1
 286:	88 b9       	out	0x08, r24	; 8
	
	D0_INT_DISABLE;
 288:	8d b3       	in	r24, 0x1d	; 29
 28a:	8e 7f       	andi	r24, 0xFE	; 254
 28c:	8d bb       	out	0x1d, r24	; 29
	D1_INT_DISABLE;
 28e:	8d b3       	in	r24, 0x1d	; 29
 290:	8d 7f       	andi	r24, 0xFD	; 253
 292:	8d bb       	out	0x1d, r24	; 29
	D0_D1_INT_FLAG_CLEAR;
 294:	8c b3       	in	r24, 0x1c	; 28
 296:	83 60       	ori	r24, 0x03	; 3
 298:	8c bb       	out	0x1c, r24	; 28
	
	CLEAR_TO_COUNTER;
 29a:	16 bc       	out	0x26, r1	; 38
	CLEAR_T0_COMP_INT_FLAG;
 29c:	85 b3       	in	r24, 0x15	; 21
 29e:	82 60       	ori	r24, 0x02	; 2
 2a0:	85 bb       	out	0x15, r24	; 21
	WAIT_W26_HIGH_PHASE;
 2a2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2a6:	87 bd       	out	0x27, r24	; 39
	TO_COMP_INT_ENABLE;
 2a8:	ee e6       	ldi	r30, 0x6E	; 110
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	82 60       	ori	r24, 0x02	; 2
 2b0:	80 83       	st	Z, r24
	
	CLEAR_T0_OV_INT_FLAG;
 2b2:	85 b3       	in	r24, 0x15	; 21
 2b4:	81 60       	ori	r24, 0x01	; 1
 2b6:	85 bb       	out	0x15, r24	; 21
	T0_OV_INT_ENABLE;
 2b8:	80 81       	ld	r24, Z
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	80 83       	st	Z, r24
 2be:	08 95       	ret

000002c0 <Weigand_26_TIMER0_ini>:
@brief Timer divider. \n
We need overflow time little bigger then Wiegand 26 one bit send time.
*/
void Weigand_26_TIMER0_ini()
{
	TCCR0B |= (1 << CS02);											           /// F_CPU / 256		
 2c0:	85 b5       	in	r24, 0x25	; 37
 2c2:	84 60       	ori	r24, 0x04	; 4
 2c4:	85 bd       	out	0x25, r24	; 37
 2c6:	08 95       	ret

000002c8 <Weigand_26_ini>:
/**
@brief Wiegand 26 start initialization.
*/
void Weigand_26_ini()
{
    Weigand_26_D0_D1_int_ini();
 2c8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Weigand_26_D0_D1_int_ini>
    Weigand_26_TIMER0_ini();
 2cc:	0e 94 60 01 	call	0x2c0	; 0x2c0 <Weigand_26_TIMER0_ini>
 2d0:	08 95       	ret

000002d2 <__vector_2>:
/**
@brief Set up and enable interrupt, depending on which front will be next. \n
Fill out w26_data.
*/
ISR(INT1_vect)
{														    
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	2f 93       	push	r18
 2de:	3f 93       	push	r19
 2e0:	4f 93       	push	r20
 2e2:	5f 93       	push	r21
 2e4:	6f 93       	push	r22
 2e6:	7f 93       	push	r23
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
	if (d1_expect_rising_falling == EXPECT_FALLING)
 2f4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <d1_expect_rising_falling>
 2f8:	81 11       	cpse	r24, r1
 2fa:	26 c0       	rjmp	.+76     	; 0x348 <__vector_2+0x76>
	{
		D1_INT_RISING;
 2fc:	e9 e6       	ldi	r30, 0x69	; 105
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	8c 60       	ori	r24, 0x0C	; 12
 304:	80 83       	st	Z, r24
		d1_expect_rising_falling = EXPECT_RISING;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <d1_expect_rising_falling>
		d1_status = STATUS_ACTIVE;
 30c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <d1_status>
		d0_status = STATUS_PASSIVE;
 310:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <d0_status>
			
		w26_data <<= 1;
 314:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <w26_data>
 318:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <w26_data+0x1>
 31c:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <w26_data+0x2>
 320:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <w26_data+0x3>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	aa 1f       	adc	r26, r26
 32a:	bb 1f       	adc	r27, r27
		w26_data += 1;						
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	a1 1d       	adc	r26, r1
 330:	b1 1d       	adc	r27, r1
 332:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <w26_data>
 336:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <w26_data+0x1>
 33a:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <w26_data+0x2>
 33e:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <w26_data+0x3>
						
		Weigand_26_low_phase_ini();		
 342:	0e 94 22 01 	call	0x244	; 0x244 <Weigand_26_low_phase_ini>
 346:	19 c0       	rjmp	.+50     	; 0x37a <__vector_2+0xa8>
	}
	else if (d1_expect_rising_falling == EXPECT_RISING)
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	b9 f4       	brne	.+46     	; 0x37a <__vector_2+0xa8>
	{
		D1_INT_FALLING;
 34c:	e9 e6       	ldi	r30, 0x69	; 105
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	8b 7f       	andi	r24, 0xFB	; 251
 354:	80 83       	st	Z, r24
		d1_expect_rising_falling = EXPECT_FALLING;	
 356:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <d1_expect_rising_falling>
		d1_status = STATUS_PASSIVE;
 35a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <d1_status>
		d0_status = STATUS_PASSIVE;	
 35e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <d0_status>
			
		w26_receive_bit_counter++;
 362:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <w26_receive_bit_counter>
 366:	8f 5f       	subi	r24, 0xFF	; 255
 368:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <w26_receive_bit_counter>
		if (w26_receive_bit_counter < w26_receive_data_length)
 36c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 370:	89 17       	cp	r24, r25
 372:	08 f4       	brcc	.+2      	; 0x376 <__vector_2+0xa4>
		{
			TCNT0 = 0;
 374:	16 bc       	out	0x26, r1	; 38
		}
		
		Weigand_26_high_phase_ini();		
 376:	0e 94 41 01 	call	0x282	; 0x282 <Weigand_26_high_phase_ini>
	}		
}
 37a:	ff 91       	pop	r31
 37c:	ef 91       	pop	r30
 37e:	bf 91       	pop	r27
 380:	af 91       	pop	r26
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	7f 91       	pop	r23
 388:	6f 91       	pop	r22
 38a:	5f 91       	pop	r21
 38c:	4f 91       	pop	r20
 38e:	3f 91       	pop	r19
 390:	2f 91       	pop	r18
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <__vector_1>:
/**
@brief Set up and enable interrupt, depending on which front will be next. \n
Fill out w26_data.
*/
ISR(INT0_vect)
{														   // 
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1
 3a6:	2f 93       	push	r18
 3a8:	3f 93       	push	r19
 3aa:	4f 93       	push	r20
 3ac:	5f 93       	push	r21
 3ae:	6f 93       	push	r22
 3b0:	7f 93       	push	r23
 3b2:	8f 93       	push	r24
 3b4:	9f 93       	push	r25
 3b6:	af 93       	push	r26
 3b8:	bf 93       	push	r27
 3ba:	ef 93       	push	r30
 3bc:	ff 93       	push	r31
	if (d0_expect_rising_falling == EXPECT_FALLING)
 3be:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <d0_expect_rising_falling>
 3c2:	81 11       	cpse	r24, r1
 3c4:	23 c0       	rjmp	.+70     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
	{
		D0_INT_RISING;
 3c6:	e9 e6       	ldi	r30, 0x69	; 105
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	83 60       	ori	r24, 0x03	; 3
 3ce:	80 83       	st	Z, r24
		d0_expect_rising_falling = EXPECT_RISING;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <d0_expect_rising_falling>
		d0_status = STATUS_ACTIVE;
 3d6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <d0_status>
		d1_status = STATUS_PASSIVE;
 3da:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <d1_status>
						
		w26_data <<= 1;					
 3de:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <w26_data>
 3e2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <w26_data+0x1>
 3e6:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <w26_data+0x2>
 3ea:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <w26_data+0x3>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	aa 1f       	adc	r26, r26
 3f4:	bb 1f       	adc	r27, r27
 3f6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <w26_data>
 3fa:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <w26_data+0x1>
 3fe:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <w26_data+0x2>
 402:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <w26_data+0x3>
				
		Weigand_26_low_phase_ini();									
 406:	0e 94 22 01 	call	0x244	; 0x244 <Weigand_26_low_phase_ini>
 40a:	19 c0       	rjmp	.+50     	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
	}
	else if (d0_expect_rising_falling == EXPECT_RISING)
 40c:	81 30       	cpi	r24, 0x01	; 1
 40e:	b9 f4       	brne	.+46     	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
	{
		D0_INT_FALLING;
 410:	e9 e6       	ldi	r30, 0x69	; 105
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	8e 7f       	andi	r24, 0xFE	; 254
 418:	80 83       	st	Z, r24
		d0_expect_rising_falling = EXPECT_FALLING;
 41a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <d0_expect_rising_falling>
		d1_status = STATUS_PASSIVE;
 41e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <d1_status>
		d0_status = STATUS_PASSIVE;
 422:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <d0_status>
					
		w26_receive_bit_counter++;	
 426:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <w26_receive_bit_counter>
 42a:	8f 5f       	subi	r24, 0xFF	; 255
 42c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <w26_receive_bit_counter>
		if (w26_receive_bit_counter < w26_receive_data_length)
 430:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 434:	89 17       	cp	r24, r25
 436:	08 f4       	brcc	.+2      	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
		{
			TCNT0 = 0;
 438:	16 bc       	out	0x26, r1	; 38
		}
		
		Weigand_26_high_phase_ini();		
 43a:	0e 94 41 01 	call	0x282	; 0x282 <Weigand_26_high_phase_ini>
	}
}
 43e:	ff 91       	pop	r31
 440:	ef 91       	pop	r30
 442:	bf 91       	pop	r27
 444:	af 91       	pop	r26
 446:	9f 91       	pop	r25
 448:	8f 91       	pop	r24
 44a:	7f 91       	pop	r23
 44c:	6f 91       	pop	r22
 44e:	5f 91       	pop	r21
 450:	4f 91       	pop	r20
 452:	3f 91       	pop	r19
 454:	2f 91       	pop	r18
 456:	0f 90       	pop	r0
 458:	0f be       	out	0x3f, r0	; 63
 45a:	0f 90       	pop	r0
 45c:	1f 90       	pop	r1
 45e:	18 95       	reti

00000460 <__vector_14>:
/**
@brief Depending what front and on what line will be next \n
we enable interrupts.
*/
ISR (TIMER0_COMPA_vect)
{
 460:	1f 92       	push	r1
 462:	0f 92       	push	r0
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	0f 92       	push	r0
 468:	11 24       	eor	r1, r1
 46a:	2f 93       	push	r18
 46c:	3f 93       	push	r19
 46e:	4f 93       	push	r20
 470:	8f 93       	push	r24
 472:	9f 93       	push	r25
 474:	ef 93       	push	r30
 476:	ff 93       	push	r31
	if ((d0_status == STATUS_ACTIVE) & (d1_status == STATUS_PASSIVE))
 478:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <d0_status>
 47c:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <d1_status>
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	21 11       	cpse	r18, r1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	31 30       	cpi	r19, 0x01	; 1
 48a:	09 f0       	breq	.+2      	; 0x48e <__vector_14+0x2e>
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	89 23       	and	r24, r25
 490:	a1 f0       	breq	.+40     	; 0x4ba <__vector_14+0x5a>
	{
		if (d0_expect_rising_falling == EXPECT_RISING)
 492:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <d0_expect_rising_falling>
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	09 f0       	breq	.+2      	; 0x49c <__vector_14+0x3c>
 49a:	3e c0       	rjmp	.+124    	; 0x518 <__stack+0x19>
		{
			D0_D1_INT_FLAG_CLEAR;
 49c:	8c b3       	in	r24, 0x1c	; 28
 49e:	83 60       	ori	r24, 0x03	; 3
 4a0:	8c bb       	out	0x1c, r24	; 28
			D0_INT_ENABLE;
 4a2:	8d b3       	in	r24, 0x1d	; 29
 4a4:	81 60       	ori	r24, 0x01	; 1
 4a6:	8d bb       	out	0x1d, r24	; 29
			TO_COMP_INT_DISABLE;
 4a8:	ee e6       	ldi	r30, 0x6E	; 110
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	8d 7f       	andi	r24, 0xFD	; 253
 4b0:	80 83       	st	Z, r24
			DEBUG_LED_OFF;
 4b2:	88 b1       	in	r24, 0x08	; 8
 4b4:	8e 7f       	andi	r24, 0xFE	; 254
 4b6:	88 b9       	out	0x08, r24	; 8
 4b8:	2f c0       	rjmp	.+94     	; 0x518 <__stack+0x19>
		} 		
	} 
	else if ((d0_status == STATUS_PASSIVE) & (d1_status == STATUS_ACTIVE))
 4ba:	41 e0       	ldi	r20, 0x01	; 1
 4bc:	31 11       	cpse	r19, r1
 4be:	40 e0       	ldi	r20, 0x00	; 0
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	21 30       	cpi	r18, 0x01	; 1
 4c4:	09 f0       	breq	.+2      	; 0x4c8 <__vector_14+0x68>
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	84 23       	and	r24, r20
 4ca:	99 f0       	breq	.+38     	; 0x4f2 <__vector_14+0x92>
	{
		if (d1_expect_rising_falling == EXPECT_RISING)
 4cc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <d1_expect_rising_falling>
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	11 f5       	brne	.+68     	; 0x518 <__stack+0x19>
		{
			D0_D1_INT_FLAG_CLEAR;
 4d4:	8c b3       	in	r24, 0x1c	; 28
 4d6:	83 60       	ori	r24, 0x03	; 3
 4d8:	8c bb       	out	0x1c, r24	; 28
			D1_INT_ENABLE;			
 4da:	8d b3       	in	r24, 0x1d	; 29
 4dc:	82 60       	ori	r24, 0x02	; 2
 4de:	8d bb       	out	0x1d, r24	; 29
			TO_COMP_INT_DISABLE;
 4e0:	ee e6       	ldi	r30, 0x6E	; 110
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	8d 7f       	andi	r24, 0xFD	; 253
 4e8:	80 83       	st	Z, r24
			DEBUG_LED_OFF;
 4ea:	88 b1       	in	r24, 0x08	; 8
 4ec:	8e 7f       	andi	r24, 0xFE	; 254
 4ee:	88 b9       	out	0x08, r24	; 8
 4f0:	13 c0       	rjmp	.+38     	; 0x518 <__stack+0x19>
		} 		
	}
	else if ((d0_status == STATUS_PASSIVE) & (d1_status == STATUS_PASSIVE))
 4f2:	94 23       	and	r25, r20
 4f4:	89 f0       	breq	.+34     	; 0x518 <__stack+0x19>
	{
		D0_D1_INT_FLAG_CLEAR;
 4f6:	8c b3       	in	r24, 0x1c	; 28
 4f8:	83 60       	ori	r24, 0x03	; 3
 4fa:	8c bb       	out	0x1c, r24	; 28
		D0_INT_ENABLE;
 4fc:	8d b3       	in	r24, 0x1d	; 29
 4fe:	81 60       	ori	r24, 0x01	; 1
 500:	8d bb       	out	0x1d, r24	; 29
		D1_INT_ENABLE;
 502:	8d b3       	in	r24, 0x1d	; 29
 504:	82 60       	ori	r24, 0x02	; 2
 506:	8d bb       	out	0x1d, r24	; 29
		TO_COMP_INT_DISABLE;
 508:	ee e6       	ldi	r30, 0x6E	; 110
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	8d 7f       	andi	r24, 0xFD	; 253
 510:	80 83       	st	Z, r24
		DEBUG_LED_OFF;
 512:	88 b1       	in	r24, 0x08	; 8
 514:	8e 7f       	andi	r24, 0xFE	; 254
 516:	88 b9       	out	0x08, r24	; 8
	}
	
	
	
}
 518:	ff 91       	pop	r31
 51a:	ef 91       	pop	r30
 51c:	9f 91       	pop	r25
 51e:	8f 91       	pop	r24
 520:	4f 91       	pop	r20
 522:	3f 91       	pop	r19
 524:	2f 91       	pop	r18
 526:	0f 90       	pop	r0
 528:	0f be       	out	0x3f, r0	; 63
 52a:	0f 90       	pop	r0
 52c:	1f 90       	pop	r1
 52e:	18 95       	reti

00000530 <__vector_16>:
1) If we receive all bytes in message, push message higher.
2) If we receive not all bytes in message (we receive noise), reset \n
w26_receive_bit_counter and w26_data.
*/
ISR (TIMER0_OVF_vect)
{		
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	11 24       	eor	r1, r1
 53a:	8f 93       	push	r24
 53c:	9f 93       	push	r25
 53e:	af 93       	push	r26
 540:	bf 93       	push	r27
 542:	ef 93       	push	r30
 544:	ff 93       	push	r31
	
	if (w26_receive_bit_counter == w26_receive_data_length)
 546:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <w26_receive_bit_counter>
 54a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 54e:	98 13       	cpse	r25, r24
 550:	20 c0       	rjmp	.+64     	; 0x592 <__vector_16+0x62>
	{
		w26_receive_bit_counter = 0;
 552:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <w26_receive_bit_counter>
		w26_recieve_data = w26_data;						
 556:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <w26_data>
 55a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <w26_data+0x1>
 55e:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <w26_data+0x2>
 562:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <w26_data+0x3>
 566:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <w26_recieve_data>
 56a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <w26_recieve_data+0x1>
 56e:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <w26_recieve_data+0x2>
 572:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <w26_recieve_data+0x3>
		w26_data = 0;		
 576:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <w26_data>
 57a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <w26_data+0x1>
 57e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <w26_data+0x2>
 582:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <w26_data+0x3>
		
		SET_W26_MESSAGE_READY_BIT;
 586:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <programm_status_byte>
 58a:	81 60       	ori	r24, 0x01	; 1
 58c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <programm_status_byte>
 590:	0a c0       	rjmp	.+20     	; 0x5a6 <__vector_16+0x76>
	}
	else 
	{
		w26_receive_bit_counter = 0;
 592:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <w26_receive_bit_counter>
		w26_data = 0;
 596:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <w26_data>
 59a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <w26_data+0x1>
 59e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <w26_data+0x2>
 5a2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <w26_data+0x3>
	}
		
	DEBUG_LED_ON;		
 5a6:	88 b1       	in	r24, 0x08	; 8
 5a8:	81 60       	ori	r24, 0x01	; 1
 5aa:	88 b9       	out	0x08, r24	; 8
	DEBUG_LED_OFF;
 5ac:	88 b1       	in	r24, 0x08	; 8
 5ae:	8e 7f       	andi	r24, 0xFE	; 254
 5b0:	88 b9       	out	0x08, r24	; 8
	T0_OV_INT_DISABLE;	
 5b2:	ee e6       	ldi	r30, 0x6E	; 110
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	8e 7f       	andi	r24, 0xFE	; 254
 5ba:	80 83       	st	Z, r24

}
 5bc:	ff 91       	pop	r31
 5be:	ef 91       	pop	r30
 5c0:	bf 91       	pop	r27
 5c2:	af 91       	pop	r26
 5c4:	9f 91       	pop	r25
 5c6:	8f 91       	pop	r24
 5c8:	0f 90       	pop	r0
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	0f 90       	pop	r0
 5ce:	1f 90       	pop	r1
 5d0:	18 95       	reti

000005d2 <_exit>:
 5d2:	f8 94       	cli

000005d4 <__stop_program>:
 5d4:	ff cf       	rjmp	.-2      	; 0x5d4 <__stop_program>
